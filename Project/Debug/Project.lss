
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00000ee8  00000f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080023a  0080023a  00000fb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f53  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f91  00000000  00000000  0000309b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1d  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00004e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d4  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010d7  00000000  00000000  00005a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006b4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	ff c1       	rjmp	.+1022   	; 0x404 <__vector_1>
   6:	00 00       	nop
   8:	55 c2       	rjmp	.+1194   	; 0x4b4 <__vector_2>
   a:	00 00       	nop
   c:	b6 c1       	rjmp	.+876    	; 0x37a <__vector_3>
   e:	00 00       	nop
  10:	99 c5       	rjmp	.+2866   	; 0xb44 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	81 c2       	rjmp	.+1282   	; 0x578 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	91 c5       	rjmp	.+2850   	; 0xba4 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ee       	ldi	r30, 0xE8	; 232
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 35       	cpi	r26, 0x55	; 85
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e1 d3       	rcall	.+1986   	; 0x8e2 <main>
 120:	e1 c6       	rjmp	.+3522   	; 0xee4 <_exit>

00000122 <__bad_interrupt>:
 122:	a1 c1       	rjmp	.+834    	; 0x466 <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	80 68       	ori	r24, 0x80	; 128
 142:	88 b9       	out	0x08, r24	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 14c:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x30>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	9f 77       	andi	r25, 0x7F	; 127
 15e:	98 b9       	out	0x08, r25	; 8
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDBusyLoop+0x3e>
 166:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	90 68       	ori	r25, 0x80	; 128
 16c:	98 b9       	out	0x08, r25	; 8
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 176:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 178:	80 78       	andi	r24, 0x80	; 128
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDBusyLoop+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 182:	98 b1       	in	r25, 0x08	; 8
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	98 b9       	out	0x08, r25	; 8
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDBusyLoop+0x66>
 18e:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 190:	81 11       	cpse	r24, r1
 192:	d5 cf       	rjmp	.-86     	; 0x13e <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 194:	88 b1       	in	r24, 0x08	; 8
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 19a:	87 b1       	in	r24, 0x07	; 7
 19c:	8f 60       	ori	r24, 0x0F	; 15
 19e:	87 b9       	out	0x07, r24	; 7
 1a0:	08 95       	ret

000001a2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 1a2:	28 2f       	mov	r18, r24
 1a4:	22 95       	swap	r18
 1a6:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 1a8:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <LCDByte+0x14>
	CLEAR_RS();
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f 7b       	andi	r25, 0xBF	; 191
 1b2:	98 b9       	out	0x08, r25	; 8
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCDByte+0x1a>
else
	SET_RS();
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	90 64       	ori	r25, 0x40	; 64
 1ba:	98 b9       	out	0x08, r25	; 8
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDByte+0x1c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	90 68       	ori	r25, 0x80	; 128
 1c8:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1d0:	98 b9       	out	0x08, r25	; 8
 1d2:	95 e0       	ldi	r25, 0x05	; 5
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDByte+0x32>
 1d8:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1da:	98 b1       	in	r25, 0x08	; 8
 1dc:	9f 77       	andi	r25, 0x7F	; 127
 1de:	98 b9       	out	0x08, r25	; 8
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDByte+0x40>
 1e6:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	90 68       	ori	r25, 0x80	; 128
 1ec:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCDByte+0x56>
 1fc:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	88 b9       	out	0x08, r24	; 8
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x64>
 20a:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 20c:	8b cf       	rjmp	.-234    	; 0x124 <LCDBusyLoop>
 20e:	08 95       	ret

00000210 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	86 e7       	ldi	r24, 0x76	; 118
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <InitLCD+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <InitLCD+0x14>
 224:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 226:	87 b1       	in	r24, 0x07	; 7
 228:	8f 60       	ori	r24, 0x0F	; 15
 22a:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 22c:	87 b1       	in	r24, 0x07	; 7
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 232:	87 b1       	in	r24, 0x07	; 7
 234:	80 64       	ori	r24, 0x40	; 64
 236:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 244:	88 b1       	in	r24, 0x08	; 8
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 250:	88 b1       	in	r24, 0x08	; 8
 252:	8f 7b       	andi	r24, 0xBF	; 191
 254:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	00 c0       	rjmp	.+0      	; 0x258 <InitLCD+0x48>
 258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x4a>
 25a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 262:	88 b1       	in	r24, 0x08	; 8
 264:	82 60       	ori	r24, 0x02	; 2
 266:	88 b9       	out	0x08, r24	; 8
 268:	25 e0       	ldi	r18, 0x05	; 5
 26a:	2a 95       	dec	r18
 26c:	f1 f7       	brne	.-4      	; 0x26a <InitLCD+0x5a>
 26e:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 270:	88 b1       	in	r24, 0x08	; 8
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	88 b9       	out	0x08, r24	; 8
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <InitLCD+0x68>
 27c:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 27e:	52 df       	rcall	.-348    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8c 2f       	mov	r24, r28
 284:	8c 60       	ori	r24, 0x0C	; 12
 286:	8d df       	rcall	.-230    	; 0x1a2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	8a df       	rcall	.-236    	; 0x1a2 <LCDByte>
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCDWriteString+0xe>
 {
	LCDData(*msg);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	82 df       	rcall	.-252    	; 0x1a2 <LCDByte>
	msg++;
 29e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2a0:	88 81       	ld	r24, Y
 2a2:	81 11       	cpse	r24, r1
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <LCDWriteInt+0xe>
 2ba:	1f 92       	push	r1
 2bc:	1f 92       	push	r1
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2c4:	fe 01       	movw	r30, r28
 2c6:	31 96       	adiw	r30, 0x01	; 1
 2c8:	25 e0       	ldi	r18, 0x05	; 5
 2ca:	df 01       	movw	r26, r30
 2cc:	1d 92       	st	X+, r1
 2ce:	2a 95       	dec	r18
 2d0:	e9 f7       	brne	.-6      	; 0x2cc <LCDWriteInt+0x20>
	int i=4,j=0;
 2d2:	24 e0       	ldi	r18, 0x04	; 4
 2d4:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 2d6:	0e c0       	rjmp	.+28     	; 0x2f4 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	bb d4       	rcall	.+2422   	; 0xc54 <__divmodhi4>
 2de:	e1 e0       	ldi	r30, 0x01	; 1
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	ec 0f       	add	r30, r28
 2e4:	fd 1f       	adc	r31, r29
 2e6:	e2 0f       	add	r30, r18
 2e8:	f3 1f       	adc	r31, r19
 2ea:	80 83       	st	Z, r24
	val=val/10;
 2ec:	86 2f       	mov	r24, r22
 2ee:	97 2f       	mov	r25, r23
	i--;
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	81 f7       	brne	.-32     	; 0x2d8 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2f8:	bf ef       	ldi	r27, 0xFF	; 255
 2fa:	eb 16       	cp	r14, r27
 2fc:	fb 06       	cpc	r15, r27
 2fe:	81 f4       	brne	.+32     	; 0x320 <LCDWriteInt+0x74>
 300:	03 c0       	rjmp	.+6      	; 0x308 <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
 302:	0f 5f       	subi	r16, 0xFF	; 255
 304:	1f 4f       	sbci	r17, 0xFF	; 255
 306:	02 c0       	rjmp	.+4      	; 0x30c <LCDWriteInt+0x60>
 308:	00 e0       	ldi	r16, 0x00	; 0
 30a:	10 e0       	ldi	r17, 0x00	; 0
 30c:	e1 e0       	ldi	r30, 0x01	; 1
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ec 0f       	add	r30, r28
 312:	fd 1f       	adc	r31, r29
 314:	e0 0f       	add	r30, r16
 316:	f1 1f       	adc	r31, r17
 318:	20 81       	ld	r18, Z
 31a:	22 23       	and	r18, r18
 31c:	91 f3       	breq	.-28     	; 0x302 <LCDWriteInt+0x56>
 31e:	04 c0       	rjmp	.+8      	; 0x328 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 320:	05 e0       	ldi	r16, 0x05	; 5
 322:	10 e0       	ldi	r17, 0x00	; 0
 324:	0e 19       	sub	r16, r14
 326:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 328:	99 23       	and	r25, r25
 32a:	84 f4       	brge	.+32     	; 0x34c <LCDWriteInt+0xa0>
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	8d e2       	ldi	r24, 0x2D	; 45
 330:	38 df       	rcall	.-400    	; 0x1a2 <LCDByte>
 332:	0c c0       	rjmp	.+24     	; 0x34c <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 334:	e1 e0       	ldi	r30, 0x01	; 1
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ec 0f       	add	r30, r28
 33a:	fd 1f       	adc	r31, r29
 33c:	e0 0f       	add	r30, r16
 33e:	f1 1f       	adc	r31, r17
 340:	80 81       	ld	r24, Z
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	2d df       	rcall	.-422    	; 0x1a2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 348:	0f 5f       	subi	r16, 0xFF	; 255
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
 34c:	05 30       	cpi	r16, 0x05	; 5
 34e:	11 05       	cpc	r17, r1
 350:	8c f3       	brlt	.-30     	; 0x334 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	08 95       	ret

0000036a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 36a:	88 32       	cpi	r24, 0x28	; 40
 36c:	28 f4       	brcc	.+10     	; 0x378 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 36e:	61 11       	cpse	r22, r1
 370:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	80 68       	ori	r24, 0x80	; 128
 376:	15 cf       	rjmp	.-470    	; 0x1a2 <LCDByte>
 378:	08 95       	ret

0000037a <__vector_3>:
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		

	return;
}/*clearQueue*/
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	0b b6       	in	r0, 0x3b	; 59
 386:	0f 92       	push	r0
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	4a 9b       	sbis	0x09, 2	; 9
 392:	0d c0       	rjmp	.+26     	; 0x3ae <__vector_3+0x34>
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	93 e0       	ldi	r25, 0x03	; 3
 398:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <IR_min+0x1>
 39c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <IR_min>
 3a0:	ea e7       	ldi	r30, 0x7A	; 122
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 64       	ori	r24, 0x40	; 64
 3a8:	80 83       	st	Z, r24
 3aa:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	0f 90       	pop	r0
 3b8:	0b be       	out	0x3b, r0	; 59
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <mTimer>:
 3c4:	e1 e8       	ldi	r30, 0x81	; 129
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	20 81       	ld	r18, Z
 3ca:	28 60       	ori	r18, 0x08	; 8
 3cc:	20 83       	st	Z, r18
 3ce:	28 ee       	ldi	r18, 0xE8	; 232
 3d0:	33 e0       	ldi	r19, 0x03	; 3
 3d2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3d6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 3de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 3e2:	26 b3       	in	r18, 0x16	; 22
 3e4:	22 60       	ori	r18, 0x02	; 2
 3e6:	26 bb       	out	0x16, r18	; 22
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <mTimer+0x38>
 3ee:	b1 9b       	sbis	0x16, 1	; 22
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <mTimer+0x38>
 3f2:	46 b3       	in	r20, 0x16	; 22
 3f4:	42 60       	ori	r20, 0x02	; 2
 3f6:	46 bb       	out	0x16, r20	; 22
 3f8:	2f 5f       	subi	r18, 0xFF	; 255
 3fa:	3f 4f       	sbci	r19, 0xFF	; 255
 3fc:	28 17       	cp	r18, r24
 3fe:	39 07       	cpc	r19, r25
 400:	b4 f3       	brlt	.-20     	; 0x3ee <mTimer+0x2a>
 402:	08 95       	ret

00000404 <__vector_1>:
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	0b b6       	in	r0, 0x3b	; 59
 410:	0f 92       	push	r0
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	4f 93       	push	r20
 418:	5f 93       	push	r21
 41a:	6f 93       	push	r22
 41c:	7f 93       	push	r23
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
 42a:	84 e1       	ldi	r24, 0x14	; 20
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	ca df       	rcall	.-108    	; 0x3c4 <mTimer>
 430:	48 99       	sbic	0x09, 0	; 9
 432:	fe cf       	rjmp	.-4      	; 0x430 <__vector_1+0x2c>
 434:	84 e1       	ldi	r24, 0x14	; 20
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	c5 df       	rcall	.-118    	; 0x3c4 <mTimer>
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <STATE>
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0b be       	out	0x3b, r0	; 59
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <__vector_default>:
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	85 e5       	ldi	r24, 0x55	; 85
 472:	88 b9       	out	0x08, r24	; 8
 474:	88 ee       	ldi	r24, 0xE8	; 232
 476:	93 e0       	ldi	r25, 0x03	; 3
 478:	a5 df       	rcall	.-182    	; 0x3c4 <mTimer>
 47a:	18 b8       	out	0x08, r1	; 8
 47c:	84 ef       	ldi	r24, 0xF4	; 244
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	a1 df       	rcall	.-190    	; 0x3c4 <mTimer>
 482:	f6 cf       	rjmp	.-20     	; 0x470 <__vector_default+0xa>

00000484 <rampTimer>:
 484:	e1 e9       	ldi	r30, 0x91	; 145
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	80 83       	st	Z, r24
 48e:	80 81       	ld	r24, Z
 490:	85 60       	ori	r24, 0x05	; 5
 492:	80 83       	st	Z, r24
 494:	84 e2       	ldi	r24, 0x24	; 36
 496:	94 ef       	ldi	r25, 0xF4	; 244
 498:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 49c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 4a0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
 4a4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
 4a8:	e1 e7       	ldi	r30, 0x71	; 113
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	82 60       	ori	r24, 0x02	; 2
 4b0:	80 83       	st	Z, r24
 4b2:	08 95       	ret

000004b4 <__vector_2>:
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	0b b6       	in	r0, 0x3b	; 59
 4c0:	0f 92       	push	r0
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
 4da:	84 e1       	ldi	r24, 0x14	; 20
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	72 df       	rcall	.-284    	; 0x3c4 <mTimer>
 4e0:	49 9b       	sbis	0x09, 1	; 9
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <__vector_2+0x2c>
 4e4:	84 e1       	ldi	r24, 0x14	; 20
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	6d df       	rcall	.-294    	; 0x3c4 <mTimer>
 4ea:	cc df       	rcall	.-104    	; 0x484 <rampTimer>
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0b be       	out	0x3b, r0	; 59
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <setup>:
 512:	fc 01       	movw	r30, r24
 514:	11 82       	std	Z+1, r1	; 0x01
 516:	10 82       	st	Z, r1
 518:	fb 01       	movw	r30, r22
 51a:	11 82       	std	Z+1, r1	; 0x01
 51c:	10 82       	st	Z, r1
 51e:	08 95       	ret

00000520 <initLink>:
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	ec 01       	movw	r28, r24
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	bb d3       	rcall	.+1910   	; 0xca2 <malloc>
 52c:	99 83       	std	Y+1, r25	; 0x01
 52e:	88 83       	st	Y, r24
 530:	fc 01       	movw	r30, r24
 532:	15 82       	std	Z+5, r1	; 0x05
 534:	14 82       	std	Z+4, r1	; 0x04
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <enqueue>:
 53c:	db 01       	movw	r26, r22
 53e:	ed 91       	ld	r30, X+
 540:	fc 91       	ld	r31, X
 542:	30 97       	sbiw	r30, 0x00	; 0
 544:	61 f0       	breq	.+24     	; 0x55e <enqueue+0x22>
 546:	da 01       	movw	r26, r20
 548:	8d 91       	ld	r24, X+
 54a:	9c 91       	ld	r25, X
 54c:	11 97       	sbiw	r26, 0x01	; 1
 54e:	95 83       	std	Z+5, r25	; 0x05
 550:	84 83       	std	Z+4, r24	; 0x04
 552:	8d 91       	ld	r24, X+
 554:	9c 91       	ld	r25, X
 556:	fb 01       	movw	r30, r22
 558:	91 83       	std	Z+1, r25	; 0x01
 55a:	80 83       	st	Z, r24
 55c:	08 95       	ret
 55e:	da 01       	movw	r26, r20
 560:	2d 91       	ld	r18, X+
 562:	3c 91       	ld	r19, X
 564:	11 97       	sbiw	r26, 0x01	; 1
 566:	fc 01       	movw	r30, r24
 568:	31 83       	std	Z+1, r19	; 0x01
 56a:	20 83       	st	Z, r18
 56c:	8d 91       	ld	r24, X+
 56e:	9c 91       	ld	r25, X
 570:	db 01       	movw	r26, r22
 572:	8d 93       	st	X+, r24
 574:	9c 93       	st	X, r25
 576:	08 95       	ret

00000578 <__vector_29>:
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	0b b6       	in	r0, 0x3b	; 59
 584:	0f 92       	push	r0
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
 59e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 5a2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 5a6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 5aa:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 5ae:	28 17       	cp	r18, r24
 5b0:	39 07       	cpc	r19, r25
 5b2:	40 f4       	brcc	.+16     	; 0x5c4 <__vector_29+0x4c>
 5b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 5b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 5bc:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <IR_min+0x1>
 5c0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <IR_min>
 5c4:	4a 9b       	sbis	0x09, 2	; 9
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <__vector_29+0x5c>
 5c8:	ea e7       	ldi	r30, 0x7A	; 122
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	80 64       	ori	r24, 0x40	; 64
 5d0:	80 83       	st	Z, r24
 5d2:	83 c0       	rjmp	.+262    	; 0x6da <__vector_29+0x162>
 5d4:	8d e4       	ldi	r24, 0x4D	; 77
 5d6:	92 e0       	ldi	r25, 0x02	; 2
 5d8:	a3 df       	rcall	.-186    	; 0x520 <initLink>
 5da:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <values>
 5de:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <values+0x1>
 5e2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 5e6:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 5ea:	82 17       	cp	r24, r18
 5ec:	93 07       	cpc	r25, r19
 5ee:	94 f0       	brlt	.+36     	; 0x614 <__vector_29+0x9c>
 5f0:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <values+0x2>
 5f4:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <values+0x3>
 5f8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 5fc:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	3c f0       	brlt	.+14     	; 0x614 <__vector_29+0x9c>
 606:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <newLink>
 60a:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <newLink+0x1>
 60e:	13 82       	std	Z+3, r1	; 0x03
 610:	12 82       	std	Z+2, r1	; 0x02
 612:	5c c0       	rjmp	.+184    	; 0x6cc <__vector_29+0x154>
 614:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <values+0x4>
 618:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <values+0x5>
 61c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 620:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 624:	82 17       	cp	r24, r18
 626:	93 07       	cpc	r25, r19
 628:	a4 f0       	brlt	.+40     	; 0x652 <__vector_29+0xda>
 62a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <values+0x6>
 62e:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <values+0x7>
 632:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 636:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 63a:	28 17       	cp	r18, r24
 63c:	39 07       	cpc	r19, r25
 63e:	4c f0       	brlt	.+18     	; 0x652 <__vector_29+0xda>
 640:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <newLink>
 644:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <newLink+0x1>
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	93 83       	std	Z+3, r25	; 0x03
 64e:	82 83       	std	Z+2, r24	; 0x02
 650:	3d c0       	rjmp	.+122    	; 0x6cc <__vector_29+0x154>
 652:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <values+0x8>
 656:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <values+0x9>
 65a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 65e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 662:	82 17       	cp	r24, r18
 664:	93 07       	cpc	r25, r19
 666:	a4 f0       	brlt	.+40     	; 0x690 <__vector_29+0x118>
 668:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <values+0xa>
 66c:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <values+0xb>
 670:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 674:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 678:	28 17       	cp	r18, r24
 67a:	39 07       	cpc	r19, r25
 67c:	4c f0       	brlt	.+18     	; 0x690 <__vector_29+0x118>
 67e:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <newLink>
 682:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <newLink+0x1>
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	93 83       	std	Z+3, r25	; 0x03
 68c:	82 83       	std	Z+2, r24	; 0x02
 68e:	1e c0       	rjmp	.+60     	; 0x6cc <__vector_29+0x154>
 690:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <values+0xc>
 694:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <values+0xd>
 698:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 69c:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 6a0:	82 17       	cp	r24, r18
 6a2:	93 07       	cpc	r25, r19
 6a4:	9c f0       	brlt	.+38     	; 0x6cc <__vector_29+0x154>
 6a6:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <values+0xe>
 6aa:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <values+0xf>
 6ae:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IR_min>
 6b2:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IR_min+0x1>
 6b6:	28 17       	cp	r18, r24
 6b8:	39 07       	cpc	r19, r25
 6ba:	44 f0       	brlt	.+16     	; 0x6cc <__vector_29+0x154>
 6bc:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <newLink>
 6c0:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <newLink+0x1>
 6c4:	83 e0       	ldi	r24, 0x03	; 3
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	93 83       	std	Z+3, r25	; 0x03
 6ca:	82 83       	std	Z+2, r24	; 0x02
 6cc:	4d e4       	ldi	r20, 0x4D	; 77
 6ce:	52 e0       	ldi	r21, 0x02	; 2
 6d0:	68 e4       	ldi	r22, 0x48	; 72
 6d2:	72 e0       	ldi	r23, 0x02	; 2
 6d4:	8a e4       	ldi	r24, 0x4A	; 74
 6d6:	92 e0       	ldi	r25, 0x02	; 2
 6d8:	31 df       	rcall	.-414    	; 0x53c <enqueue>
 6da:	ff 91       	pop	r31
 6dc:	ef 91       	pop	r30
 6de:	bf 91       	pop	r27
 6e0:	af 91       	pop	r26
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	7f 91       	pop	r23
 6e8:	6f 91       	pop	r22
 6ea:	5f 91       	pop	r21
 6ec:	4f 91       	pop	r20
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	0f 90       	pop	r0
 6f4:	0b be       	out	0x3b, r0	; 59
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <dequeue>:
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	fc 01       	movw	r30, r24
 706:	80 81       	ld	r24, Z
 708:	91 81       	ldd	r25, Z+1	; 0x01
 70a:	da 01       	movw	r26, r20
 70c:	8d 93       	st	X+, r24
 70e:	9c 93       	st	X, r25
 710:	a0 81       	ld	r26, Z
 712:	b1 81       	ldd	r27, Z+1	; 0x01
 714:	10 97       	sbiw	r26, 0x00	; 0
 716:	89 f0       	breq	.+34     	; 0x73a <dequeue+0x3a>
 718:	eb 01       	movw	r28, r22
 71a:	88 81       	ld	r24, Y
 71c:	99 81       	ldd	r25, Y+1	; 0x01
 71e:	a8 17       	cp	r26, r24
 720:	b9 07       	cpc	r27, r25
 722:	29 f4       	brne	.+10     	; 0x72e <dequeue+0x2e>
 724:	11 82       	std	Z+1, r1	; 0x01
 726:	10 82       	st	Z, r1
 728:	19 82       	std	Y+1, r1	; 0x01
 72a:	18 82       	st	Y, r1
 72c:	06 c0       	rjmp	.+12     	; 0x73a <dequeue+0x3a>
 72e:	14 96       	adiw	r26, 0x04	; 4
 730:	8d 91       	ld	r24, X+
 732:	9c 91       	ld	r25, X
 734:	15 97       	sbiw	r26, 0x05	; 5
 736:	91 83       	std	Z+1, r25	; 0x01
 738:	80 83       	st	Z, r24
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 740:	dc 01       	movw	r26, r24
 742:	ed 91       	ld	r30, X+
 744:	fc 91       	ld	r31, X
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 74a:	04 c0       	rjmp	.+8      	; 0x754 <size+0x14>
		numElements++;
 74c:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 74e:	04 80       	ldd	r0, Z+4	; 0x04
 750:	f5 81       	ldd	r31, Z+5	; 0x05
 752:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 754:	30 97       	sbiw	r30, 0x00	; 0
 756:	d1 f7       	brne	.-12     	; 0x74c <size+0xc>
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 758:	08 95       	ret

0000075a <rtCW>:

/**************************************************************************************
* DESC: rotate Clockwise, accelerating for the first 10 steps and decelerating for the last 10
* INPUT: int: number of steps to rotate, int: initial delay between steps (in ms)
*/
void rtCW(int step, int delay){
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	7c 01       	movw	r14, r24
 768:	8b 01       	movw	r16, r22
	int i = 0;
 76a:	c0 e0       	ldi	r28, 0x00	; 0
 76c:	d0 e0       	ldi	r29, 0x00	; 0
	while(i < step){
 76e:	3c c0       	rjmp	.+120    	; 0x7e8 <rtCW+0x8e>
		ind++;
 770:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ind>
 774:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ind+0x1>
 778:	01 96       	adiw	r24, 0x01	; 1
 77a:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ind+0x1>
 77e:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ind>
		if(ind == 4) ind = 0;//ensures value never leave array bounds of 0-3
 782:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ind>
 786:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ind+0x1>
 78a:	04 97       	sbiw	r24, 0x04	; 4
 78c:	21 f4       	brne	.+8      	; 0x796 <rtCW+0x3c>
 78e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <ind+0x1>
 792:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <ind>
		PORTA = array[ind];
 796:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <ind>
 79a:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <ind+0x1>
 79e:	ee 0f       	add	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	ea 5e       	subi	r30, 0xEA	; 234
 7a4:	fd 4f       	sbci	r31, 0xFD	; 253
 7a6:	80 81       	ld	r24, Z
 7a8:	82 b9       	out	0x02, r24	; 2
		mTimer(delay);
 7aa:	c8 01       	movw	r24, r16
 7ac:	0b de       	rcall	.-1002   	; 0x3c4 <mTimer>
		i++;		
 7ae:	21 96       	adiw	r28, 0x01	; 1
		if(step == 100){//for 180degree rotation
 7b0:	84 e6       	ldi	r24, 0x64	; 100
 7b2:	e8 16       	cp	r14, r24
 7b4:	f1 04       	cpc	r15, r1
 7b6:	51 f4       	brne	.+20     	; 0x7cc <rtCW+0x72>
			if(i <= 10) delay--;
 7b8:	cb 30       	cpi	r28, 0x0B	; 11
 7ba:	d1 05       	cpc	r29, r1
 7bc:	14 f4       	brge	.+4      	; 0x7c2 <rtCW+0x68>
 7be:	01 50       	subi	r16, 0x01	; 1
 7c0:	11 09       	sbc	r17, r1
			if(i >= 90) delay++;
 7c2:	ca 35       	cpi	r28, 0x5A	; 90
 7c4:	d1 05       	cpc	r29, r1
 7c6:	14 f0       	brlt	.+4      	; 0x7cc <rtCW+0x72>
 7c8:	0f 5f       	subi	r16, 0xFF	; 255
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(step == 50){//for 90degree rotation
 7cc:	82 e3       	ldi	r24, 0x32	; 50
 7ce:	e8 16       	cp	r14, r24
 7d0:	f1 04       	cpc	r15, r1
 7d2:	51 f4       	brne	.+20     	; 0x7e8 <rtCW+0x8e>
			if(i <= 10) delay--;
 7d4:	cb 30       	cpi	r28, 0x0B	; 11
 7d6:	d1 05       	cpc	r29, r1
 7d8:	14 f4       	brge	.+4      	; 0x7de <rtCW+0x84>
 7da:	01 50       	subi	r16, 0x01	; 1
 7dc:	11 09       	sbc	r17, r1
			if(i >= 40) delay++;			
 7de:	c8 32       	cpi	r28, 0x28	; 40
 7e0:	d1 05       	cpc	r29, r1
 7e2:	14 f0       	brlt	.+4      	; 0x7e8 <rtCW+0x8e>
 7e4:	0f 5f       	subi	r16, 0xFF	; 255
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
* DESC: rotate Clockwise, accelerating for the first 10 steps and decelerating for the last 10
* INPUT: int: number of steps to rotate, int: initial delay between steps (in ms)
*/
void rtCW(int step, int delay){
	int i = 0;
	while(i < step){
 7e8:	ce 15       	cp	r28, r14
 7ea:	df 05       	cpc	r29, r15
 7ec:	0c f4       	brge	.+2      	; 0x7f0 <rtCW+0x96>
 7ee:	c0 cf       	rjmp	.-128    	; 0x770 <rtCW+0x16>
		if(step == 50){//for 90degree rotation
			if(i <= 10) delay--;
			if(i >= 40) delay++;			
		}
	}//while
}/*rtCW*/
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	ff 90       	pop	r15
 7fa:	ef 90       	pop	r14
 7fc:	08 95       	ret

000007fe <rtCCW>:

/**************************************************************************************
* DESC: rotate CounterClockwise, accelerating for the first 10 steps and decelerating for the last 10
* INPUT: int: number of steps to rotate	int: initial delay between steps (in ms)
*/
void rtCCW(int step, int delay){
 7fe:	ef 92       	push	r14
 800:	ff 92       	push	r15
 802:	0f 93       	push	r16
 804:	1f 93       	push	r17
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	7c 01       	movw	r14, r24
 80c:	8b 01       	movw	r16, r22
	int i = 0;
 80e:	c0 e0       	ldi	r28, 0x00	; 0
 810:	d0 e0       	ldi	r29, 0x00	; 0
	while(i < step){
 812:	3e c0       	rjmp	.+124    	; 0x890 <rtCCW+0x92>
		ind--;
 814:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ind>
 818:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ind+0x1>
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ind+0x1>
 822:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ind>
		if(ind == -1) ind = 3;//ensures value never leave array bounds of 0-3
 826:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ind>
 82a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ind+0x1>
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	31 f4       	brne	.+12     	; 0x83e <rtCCW+0x40>
 832:	83 e0       	ldi	r24, 0x03	; 3
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ind+0x1>
 83a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ind>
		PORTA = array[ind];
 83e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <ind>
 842:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <ind+0x1>
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	ea 5e       	subi	r30, 0xEA	; 234
 84c:	fd 4f       	sbci	r31, 0xFD	; 253
 84e:	80 81       	ld	r24, Z
 850:	82 b9       	out	0x02, r24	; 2
		mTimer(delay);
 852:	c8 01       	movw	r24, r16
 854:	b7 dd       	rcall	.-1170   	; 0x3c4 <mTimer>
		i++;		
 856:	21 96       	adiw	r28, 0x01	; 1
		if(step == 100){//for 180degree rotation
 858:	84 e6       	ldi	r24, 0x64	; 100
 85a:	e8 16       	cp	r14, r24
 85c:	f1 04       	cpc	r15, r1
 85e:	51 f4       	brne	.+20     	; 0x874 <rtCCW+0x76>
			if(i <= 10) delay--;
 860:	cb 30       	cpi	r28, 0x0B	; 11
 862:	d1 05       	cpc	r29, r1
 864:	14 f4       	brge	.+4      	; 0x86a <rtCCW+0x6c>
 866:	01 50       	subi	r16, 0x01	; 1
 868:	11 09       	sbc	r17, r1
			if(i >= 90) delay++;			
 86a:	ca 35       	cpi	r28, 0x5A	; 90
 86c:	d1 05       	cpc	r29, r1
 86e:	14 f0       	brlt	.+4      	; 0x874 <rtCCW+0x76>
 870:	0f 5f       	subi	r16, 0xFF	; 255
 872:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(step == 50){//for 90degree rotation
 874:	22 e3       	ldi	r18, 0x32	; 50
 876:	e2 16       	cp	r14, r18
 878:	f1 04       	cpc	r15, r1
 87a:	51 f4       	brne	.+20     	; 0x890 <rtCCW+0x92>
			if(i <= 10) delay--;
 87c:	cb 30       	cpi	r28, 0x0B	; 11
 87e:	d1 05       	cpc	r29, r1
 880:	14 f4       	brge	.+4      	; 0x886 <rtCCW+0x88>
 882:	01 50       	subi	r16, 0x01	; 1
 884:	11 09       	sbc	r17, r1
			if(i >= 90) delay++;			
 886:	ca 35       	cpi	r28, 0x5A	; 90
 888:	d1 05       	cpc	r29, r1
 88a:	14 f0       	brlt	.+4      	; 0x890 <rtCCW+0x92>
 88c:	0f 5f       	subi	r16, 0xFF	; 255
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
* DESC: rotate CounterClockwise, accelerating for the first 10 steps and decelerating for the last 10
* INPUT: int: number of steps to rotate	int: initial delay between steps (in ms)
*/
void rtCCW(int step, int delay){
	int i = 0;
	while(i < step){
 890:	ce 15       	cp	r28, r14
 892:	df 05       	cpc	r29, r15
 894:	0c f4       	brge	.+2      	; 0x898 <rtCCW+0x9a>
 896:	be cf       	rjmp	.-132    	; 0x814 <rtCCW+0x16>
		if(step == 50){//for 90degree rotation
			if(i <= 10) delay--;
			if(i >= 90) delay++;			
		}
	}//while
}/*rtCCW*/
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	08 95       	ret

000008a6 <init>:
/**************************************************************************************
* DESC: Initiate stepper using the following CCW & CW functions. Runs CCW until the hall effect sensor is triggered
* INPUT:
*/
void init(){
	while((PINA & 0x40) == 0x40){//rotate until hall effect triggered	//PORTA06 HE is a falling edge
 8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <init+0xc>
		rtCCW(1,20);
 8a8:	64 e1       	ldi	r22, 0x14	; 20
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	a6 df       	rcall	.-180    	; 0x7fe <rtCCW>
/**************************************************************************************
* DESC: Initiate stepper using the following CCW & CW functions. Runs CCW until the hall effect sensor is triggered
* INPUT:
*/
void init(){
	while((PINA & 0x40) == 0x40){//rotate until hall effect triggered	//PORTA06 HE is a falling edge
 8b2:	06 99       	sbic	0x00, 6	; 0
 8b4:	f9 cf       	rjmp	.-14     	; 0x8a8 <init+0x2>
		rtCCW(1,20);
	}
	rtCCW(10,10);//Bin correction. rtCW or ctCCW a few steps to get bin properly lined up. Number of steps will be station dependent 
 8b6:	6a e0       	ldi	r22, 0x0A	; 10
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	8a e0       	ldi	r24, 0x0A	; 10
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	9f cf       	rjmp	.-194    	; 0x7fe <rtCCW>
 8c0:	08 95       	ret

000008c2 <PWM>:


/******************************************************************************************	DC MOTOR **************************************************************************************/
/* ################## PWM SUBROUTINE ################## */
void PWM (){
	DDRB |= (1 << PB7);  //Set the designated PWM pin for Timer 0 to output.
 8c2:	84 b1       	in	r24, 0x04	; 4
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	84 b9       	out	0x04, r24	; 4

	TCCR0B |= (1 << CS01) | (1 << CS00); //Pre-scaler set to 64  to achieve frequency 500hz on PWM.
 8c8:	85 b5       	in	r24, 0x25	; 37
 8ca:	83 60       	ori	r24, 0x03	; 3
 8cc:	85 bd       	out	0x25, r24	; 37

	TCCR0A |= (1 << COM0A1) | (1 << WGM01) |(1 << WGM00); //Sets bits to fast PWM mode and COM0A1:0 bits to clear on compare match.
 8ce:	84 b5       	in	r24, 0x24	; 36
 8d0:	83 68       	ori	r24, 0x83	; 131
 8d2:	84 bd       	out	0x24, r24	; 36
 8d4:	08 95       	ret

000008d6 <motorRotateFWD>:
/**************************************************************************************
* DESC: rotates motor counter clockwise. results in motion of conveyor belt from right to left
* INPUT: N/A
*/
void motorRotateFWD(){
	PORTB = 0B00001110; //Writes logic to IN AND EN pin connections for counterclockwise movement
 8d6:	8e e0       	ldi	r24, 0x0E	; 14
 8d8:	85 b9       	out	0x05, r24	; 5
 8da:	08 95       	ret

000008dc <motorBrake>:
/**************************************************************************************
* DESC: Applies an electronic brake to the motor. Will stop and not allow coasting
* INPUT: N/A
*/
void motorBrake(){
	PORTB = 0B00001111; //Brake to high
 8dc:	8f e0       	ldi	r24, 0x0F	; 15
 8de:	85 b9       	out	0x05, r24	; 5
 8e0:	08 95       	ret

000008e2 <main>:
//Arrays do NOT need volatile
int array[4] = {27, 29, 45, 43};//double phase //stepper sequence	arrays dont need volatile	//{3, 24, 5, 40};//{0b00000011, 0b00011000, 0b00000101, 0b00101000}; single phase
int sorted[4] = {0,0,0,0};//Number of each object sorted 0:black 1:aluminum 2:white 3:steel
int values[8] = {949,1000,1,262,808,948,263,807};//black, aluminum, white, steel. [min,max]

int main(int argc, char *argv[]){
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
	CLKPR = 0x80;
 8e6:	e1 e6       	ldi	r30, 0x61	; 97
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 e8       	ldi	r24, 0x80	; 128
 8ec:	80 83       	st	Z, r24
	CLKPR = 0x01;// sets system clock to 8MHz
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	80 83       	st	Z, r24
	TCCR1B|=_BV(CS11);//prescale timer 1
 8f2:	e1 e8       	ldi	r30, 0x81	; 129
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	80 83       	st	Z, r24
	STATE = 0;
 8fc:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
	
	
	cli();// Disables all interrupts
 900:	f8 94       	cli
	DDRD = 0b11110000;	//set up INT2 & INT3 on PORTD
 902:	80 ef       	ldi	r24, 0xF0	; 240
 904:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;		// LCD/Red LED output
 906:	9f ef       	ldi	r25, 0xFF	; 255
 908:	97 b9       	out	0x07, r25	; 7
	DDRA = 0b00111111;//Set bits 0-5 to output 6-7 to input. Stepper and hall effect respectively
 90a:	2f e3       	ldi	r18, 0x3F	; 63
 90c:	21 b9       	out	0x01, r18	; 1
	DDRB = 0xff;//B7 used for PWM output										
 90e:	94 b9       	out	0x04, r25	; 4
	DDRL = 0b11110000;//green and yellow LEDs for signaling
 910:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	//additionally PF0(ADC0) is used for input from ADC
	
	// Set up the external Interrupts 0-3
	EICRA |= _BV(ISC01) | _BV(ISC00); //rising edge				Pause
 914:	e9 e6       	ldi	r30, 0x69	; 105
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	83 60       	ori	r24, 0x03	; 3
 91c:	80 83       	st	Z, r24
	EICRA |= _BV(ISC11);//falling edge							Ramp Down
 91e:	80 81       	ld	r24, Z
 920:	88 60       	ori	r24, 0x08	; 8
 922:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21) | _BV(ISC20);//rising edge				Reflective Laser
 924:	80 81       	ld	r24, Z
 926:	80 63       	ori	r24, 0x30	; 48
 928:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31);//falling edge							Exit Gate
 92a:	80 81       	ld	r24, Z
 92c:	80 68       	ori	r24, 0x80	; 128
 92e:	80 83       	st	Z, r24
	EIMSK |= (_BV(INT0)) | (_BV(INT1)) | (_BV(INT2)) | (_BV(INT3)); // enable Interrupts 0,1,2,3			 
 930:	8d b3       	in	r24, 0x1d	; 29
 932:	8f 60       	ori	r24, 0x0F	; 15
 934:	8d bb       	out	0x1d, r24	; 29
	// config ADC
	ADCSRA |= _BV(ADEN); // enable ADC
 936:	ea e7       	ldi	r30, 0x7A	; 122
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	80 68       	ori	r24, 0x80	; 128
 93e:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE); // enable interrupt of ADC
 940:	80 81       	ld	r24, Z
 942:	88 60       	ori	r24, 0x08	; 8
 944:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0); // _BV(ADLAR) | 'ADLAR' left adjusts. REF sets reference voltage. MUST BE RIGHT ADJUSTED!!!
 946:	ec e7       	ldi	r30, 0x7C	; 124
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	80 64       	ori	r24, 0x40	; 64
 94e:	80 83       	st	Z, r24

	// Enable all interrupts
	sei();	// Note this sets the Global Enable for all interrupts
 950:	78 94       	sei
	
	//initialize the FIFO
	rtnLink = NULL;
 952:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <rtnLink+0x1>
 956:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <rtnLink>
	newLink = NULL;	
 95a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <newLink+0x1>
 95e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <newLink>
	setup(&head, &tail);
 962:	68 e4       	ldi	r22, 0x48	; 72
 964:	72 e0       	ldi	r23, 0x02	; 2
 966:	8a e4       	ldi	r24, 0x4A	; 74
 968:	92 e0       	ldi	r25, 0x02	; 2
 96a:	d3 dd       	rcall	.-1114   	; 0x512 <setup>
	
	//Initialize the stepper motor
	init();
 96c:	9c df       	rcall	.-200    	; 0x8a6 <init>
 96e:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <step+0x1>
	step = 0;//signals it is on black
 972:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <step>
	
	//initialize/start the DC motor
	PWM();
 976:	a5 df       	rcall	.-182    	; 0x8c2 <PWM>
 978:	ae df       	rcall	.-164    	; 0x8d6 <motorRotateFWD>
	motorRotateFWD();
 97a:	8f e5       	ldi	r24, 0x5F	; 95
 97c:	87 bd       	out	0x27, r24	; 39
	OCR0A = 95;//setting PWM. for duty cycle take % of 255
 97e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <STATE>

	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	switch(STATE){
 982:	83 30       	cpi	r24, 0x03	; 3
 984:	a9 f0       	breq	.+42     	; 0x9b0 <main+0xce>
 986:	28 f4       	brcc	.+10     	; 0x992 <main+0xb0>
 988:	81 30       	cpi	r24, 0x01	; 1
 98a:	51 f0       	breq	.+20     	; 0x9a0 <main+0xbe>
 98c:	82 30       	cpi	r24, 0x02	; 2
 98e:	69 f0       	breq	.+26     	; 0x9aa <main+0xc8>
 990:	f6 cf       	rjmp	.-20     	; 0x97e <main+0x9c>
 992:	84 30       	cpi	r24, 0x04	; 4
 994:	09 f4       	brne	.+2      	; 0x998 <main+0xb6>
 996:	7a c0       	rjmp	.+244    	; 0xa8c <main+0x1aa>
 998:	85 30       	cpi	r24, 0x05	; 5
 99a:	09 f4       	brne	.+2      	; 0x99e <main+0xbc>
 99c:	cd c0       	rjmp	.+410    	; 0xb38 <main+0x256>
 99e:	ef cf       	rjmp	.-34     	; 0x97e <main+0x9c>
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	88 b9       	out	0x08, r24	; 8
	}//switch STATE
	

	MAGNETIC_STAGE://CURRENTLY NOT USED
	// Do whatever is necessary HERE
	PORTC = 0x01; // Just output pretty lights know you made it here
 9a4:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
	//Reset the state variable
	STATE = 0;
 9a8:	ea cf       	rjmp	.-44     	; 0x97e <main+0x9c>
 9aa:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
	2. Convert into digital signal/data
	3. Add link to queue containing the part data
	4.*/
	

	STATE = 0;//Reset the state variable
 9ae:	e7 cf       	rjmp	.-50     	; 0x97e <main+0x9c>
 9b0:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
	4. rotate tray to proper position & update position and parts sorted
	5. Free memory
	6. if another part has already been sensed run conveyor for a short time to get first one off.
	7. restart conveyor. speed based on Q size*/
	//STEP 1
	STATE = 0;//Reset the state variable
 9b4:	68 e4       	ldi	r22, 0x48	; 72
 9b6:	72 e0       	ldi	r23, 0x02	; 2
	//motorBrake();

	//STEP 2
	if(size(&head, &tail) == 0){//if Q is empty do not run stepper sequence
 9b8:	8a e4       	ldi	r24, 0x4A	; 74
 9ba:	92 e0       	ldi	r25, 0x02	; 2
 9bc:	c1 de       	rcall	.-638    	; 0x740 <size>
 9be:	89 2b       	or	r24, r25
 9c0:	21 f4       	brne	.+8      	; 0x9ca <main+0xe8>
 9c2:	89 df       	rcall	.-238    	; 0x8d6 <motorRotateFWD>
		motorRotateFWD();
 9c4:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
		STATE = 0;
 9c8:	da cf       	rjmp	.-76     	; 0x97e <main+0x9c>
 9ca:	44 e4       	ldi	r20, 0x44	; 68
		goto POLLING_STAGE;
 9cc:	52 e0       	ldi	r21, 0x02	; 2
	}//if
	
	//STEP 3
	dequeue(&head, &tail, &rtnLink);//sets rtnLink to the first item in the list and delete that item from the list
 9ce:	68 e4       	ldi	r22, 0x48	; 72
 9d0:	72 e0       	ldi	r23, 0x02	; 2
 9d2:	8a e4       	ldi	r24, 0x4A	; 74
 9d4:	92 e0       	ldi	r25, 0x02	; 2
 9d6:	94 de       	rcall	.-728    	; 0x700 <dequeue>
 9d8:	8c e3       	ldi	r24, 0x3C	; 60
	
	//STEP 4
	mTimer(60);//Pause to ensure stepper in correct position. Alter this duration if the PWM changes
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	f3 dc       	rcall	.-1562   	; 0x3c4 <mTimer>
 9de:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <step>
	switch(((step+4)-(rtnLink->e.obj))%4){//determine where the part must go respective of current position
 9e2:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <step+0x1>
 9e6:	04 96       	adiw	r24, 0x04	; 4
 9e8:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <rtnLink>
 9ec:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <rtnLink+0x1>
 9f0:	22 81       	ldd	r18, Z+2	; 0x02
 9f2:	33 81       	ldd	r19, Z+3	; 0x03
 9f4:	82 1b       	sub	r24, r18
 9f6:	93 0b       	sbc	r25, r19
 9f8:	64 e0       	ldi	r22, 0x04	; 4
 9fa:	70 e0       	ldi	r23, 0x00	; 0
 9fc:	2b d1       	rcall	.+598    	; 0xc54 <__divmodhi4>
 9fe:	82 30       	cpi	r24, 0x02	; 2
 a00:	91 05       	cpc	r25, r1
 a02:	59 f0       	breq	.+22     	; 0xa1a <main+0x138>
 a04:	83 30       	cpi	r24, 0x03	; 3
 a06:	91 05       	cpc	r25, r1
 a08:	71 f0       	breq	.+28     	; 0xa26 <main+0x144>
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	89 f4       	brne	.+34     	; 0xa30 <main+0x14e>
 a0e:	60 e1       	ldi	r22, 0x10	; 16
		case(0):
			break;
		case(1):
			rtCCW(50,16);
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	82 e3       	ldi	r24, 0x32	; 50
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	f3 de       	rcall	.-538    	; 0x7fe <rtCCW>
 a18:	0b c0       	rjmp	.+22     	; 0xa30 <main+0x14e>
			break;
 a1a:	60 e1       	ldi	r22, 0x10	; 16
		case(2):
			rtCW(100,16);
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	84 e6       	ldi	r24, 0x64	; 100
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	9b de       	rcall	.-714    	; 0x75a <rtCW>
 a24:	05 c0       	rjmp	.+10     	; 0xa30 <main+0x14e>
			break;
 a26:	60 e1       	ldi	r22, 0x10	; 16
		case(3):
			rtCW(50,16);
 a28:	70 e0       	ldi	r23, 0x00	; 0
 a2a:	82 e3       	ldi	r24, 0x32	; 50
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	95 de       	rcall	.-726    	; 0x75a <rtCW>
 a30:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <rtnLink>
			break;	
		default:
			break;
	}//switch case
	step = rtnLink->e.obj;//set new step to the sorted object 
 a34:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <rtnLink+0x1>
 a38:	dc 01       	movw	r26, r24
 a3a:	12 96       	adiw	r26, 0x02	; 2
 a3c:	ed 91       	ld	r30, X+
 a3e:	fc 91       	ld	r31, X
 a40:	13 97       	sbiw	r26, 0x03	; 3
 a42:	f0 93 50 02 	sts	0x0250, r31	; 0x800250 <step+0x1>
 a46:	e0 93 4f 02 	sts	0x024F, r30	; 0x80024f <step>
 a4a:	ee 0f       	add	r30, r30
	sorted[rtnLink->e.obj]++;//increments the count for the number of that type that have been sorted
 a4c:	ff 1f       	adc	r31, r31
 a4e:	e6 5c       	subi	r30, 0xC6	; 198
 a50:	fd 4f       	sbci	r31, 0xFD	; 253
 a52:	20 81       	ld	r18, Z
 a54:	31 81       	ldd	r19, Z+1	; 0x01
 a56:	2f 5f       	subi	r18, 0xFF	; 255
 a58:	3f 4f       	sbci	r19, 0xFF	; 255
 a5a:	31 83       	std	Z+1, r19	; 0x01
 a5c:	20 83       	st	Z, r18
	
	//STEP 5
	free(rtnLink);
 a5e:	b9 d1       	rcall	.+882    	; 0xdd2 <free>
 a60:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <STATE>
	
	//STEP 6
	if(STATE == 3){
 a64:	83 30       	cpi	r24, 0x03	; 3
 a66:	39 f4       	brne	.+14     	; 0xa76 <main+0x194>
		PORTL = 0b11110000;//indicator lights
 a68:	80 ef       	ldi	r24, 0xF0	; 240
 a6a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
		motorRotateFWD();//
 a6e:	33 df       	rcall	.-410    	; 0x8d6 <motorRotateFWD>
		mTimer(30);//
 a70:	8e e1       	ldi	r24, 0x1E	; 30
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	a7 dc       	rcall	.-1714   	; 0x3c4 <mTimer>
 a76:	68 e4       	ldi	r22, 0x48	; 72
	}
	
	//STEP 7
	if(size(&head,&tail)==0){
 a78:	72 e0       	ldi	r23, 0x02	; 2
 a7a:	8a e4       	ldi	r24, 0x4A	; 74
 a7c:	92 e0       	ldi	r25, 0x02	; 2
 a7e:	60 de       	rcall	.-832    	; 0x740 <size>
 a80:	89 2b       	or	r24, r25
 a82:	11 f4       	brne	.+4      	; 0xa88 <main+0x1a6>
 a84:	8f e5       	ldi	r24, 0x5F	; 95
 a86:	87 bd       	out	0x27, r24	; 39
	OCR0A = 95;//once no more are between sensor and exit, turn speed back down
 a88:	26 df       	rcall	.-436    	; 0x8d6 <motorRotateFWD>
	}
	motorRotateFWD();
 a8a:	79 cf       	rjmp	.-270    	; 0x97e <main+0x9c>
		
	goto POLLING_STAGE;
 a8c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <running>
	//END OF BUCKET#########################################################################################################	
	
	
	PAUSE:
	if(running == 0){//if paused
 a90:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <running+0x1>
 a94:	89 2b       	or	r24, r25
 a96:	69 f4       	brne	.+26     	; 0xab2 <main+0x1d0>
 a98:	81 e0       	ldi	r24, 0x01	; 1
		running = 1;
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <running+0x1>
 aa0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <running>
		motorRotateFWD();
 aa4:	18 df       	rcall	.-464    	; 0x8d6 <motorRotateFWD>
		LCDClear();
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	7b db       	rcall	.-2314   	; 0x1a2 <LCDByte>
		STATE = 0;
 aac:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
		goto POLLING_STAGE;
 ab0:	66 cf       	rjmp	.-308    	; 0x97e <main+0x9c>
	}
	else{//assumes running
		running = 0;
 ab2:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <running+0x1>
 ab6:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <running>
		motorBrake();
 aba:	10 df       	rcall	.-480    	; 0x8dc <motorBrake>
		InitLCD(LS_BLINK|LS_ULINE);
 abc:	83 e0       	ldi	r24, 0x03	; 3
 abe:	a8 db       	rcall	.-2224   	; 0x210 <InitLCD>
		LCDClear();
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	6e db       	rcall	.-2340   	; 0x1a2 <LCDByte>
		LCDWriteString("B:  A:  W:  S:");//print out sorted & unsorted part counts
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	92 e0       	ldi	r25, 0x02	; 2
 aca:	e3 db       	rcall	.-2106   	; 0x292 <LCDWriteString>
		LCDWriteIntXY(2,0,sorted[0],2);
 acc:	60 e0       	ldi	r22, 0x00	; 0
 ace:	82 e0       	ldi	r24, 0x02	; 2
 ad0:	4c dc       	rcall	.-1896   	; 0x36a <LCDGotoXY>
 ad2:	ca e3       	ldi	r28, 0x3A	; 58
 ad4:	d2 e0       	ldi	r29, 0x02	; 2
 ad6:	62 e0       	ldi	r22, 0x02	; 2
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	88 81       	ld	r24, Y
 adc:	99 81       	ldd	r25, Y+1	; 0x01
 ade:	e6 db       	rcall	.-2100   	; 0x2ac <LCDWriteInt>
		LCDWriteIntXY(6,0,sorted[1],2);
 ae0:	60 e0       	ldi	r22, 0x00	; 0
 ae2:	86 e0       	ldi	r24, 0x06	; 6
 ae4:	42 dc       	rcall	.-1916   	; 0x36a <LCDGotoXY>
 ae6:	62 e0       	ldi	r22, 0x02	; 2
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	8a 81       	ldd	r24, Y+2	; 0x02
 aec:	9b 81       	ldd	r25, Y+3	; 0x03
		LCDWriteIntXY(10,0,sorted[2],2);
 aee:	de db       	rcall	.-2116   	; 0x2ac <LCDWriteInt>
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	8a e0       	ldi	r24, 0x0A	; 10
 af4:	3a dc       	rcall	.-1932   	; 0x36a <LCDGotoXY>
 af6:	62 e0       	ldi	r22, 0x02	; 2
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	8c 81       	ldd	r24, Y+4	; 0x04
 afc:	9d 81       	ldd	r25, Y+5	; 0x05
		LCDWriteIntXY(14,0,sorted[3],2);
 afe:	d6 db       	rcall	.-2132   	; 0x2ac <LCDWriteInt>
 b00:	60 e0       	ldi	r22, 0x00	; 0
 b02:	8e e0       	ldi	r24, 0x0E	; 14
 b04:	32 dc       	rcall	.-1948   	; 0x36a <LCDGotoXY>
 b06:	62 e0       	ldi	r22, 0x02	; 2
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	8e 81       	ldd	r24, Y+6	; 0x06
 b0c:	9f 81       	ldd	r25, Y+7	; 0x07
 b0e:	ce db       	rcall	.-2148   	; 0x2ac <LCDWriteInt>
 b10:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteStringXY(0,1,"Un-Sorted:")
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	2a dc       	rcall	.-1964   	; 0x36a <LCDGotoXY>
 b16:	8f e2       	ldi	r24, 0x2F	; 47
 b18:	92 e0       	ldi	r25, 0x02	; 2
 b1a:	bb db       	rcall	.-2186   	; 0x292 <LCDWriteString>
 b1c:	61 e0       	ldi	r22, 0x01	; 1
 b1e:	8b e0       	ldi	r24, 0x0B	; 11
 b20:	24 dc       	rcall	.-1976   	; 0x36a <LCDGotoXY>
		LCDWriteIntXY(11,1,size(&head,&tail),1);
 b22:	68 e4       	ldi	r22, 0x48	; 72
 b24:	72 e0       	ldi	r23, 0x02	; 2
 b26:	8a e4       	ldi	r24, 0x4A	; 74
 b28:	92 e0       	ldi	r25, 0x02	; 2
 b2a:	0a de       	rcall	.-1004   	; 0x740 <size>
 b2c:	61 e0       	ldi	r22, 0x01	; 1
 b2e:	70 e0       	ldi	r23, 0x00	; 0
 b30:	bd db       	rcall	.-2182   	; 0x2ac <LCDWriteInt>
 b32:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <STATE>
 b36:	23 cf       	rjmp	.-442    	; 0x97e <main+0x9c>
 b38:	f8 94       	cli
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	90 e0       	ldi	r25, 0x00	; 0
		STATE = 0;
 b3e:	df 91       	pop	r29
 b40:	cf 91       	pop	r28
		goto POLLING_STAGE;
 b42:	08 95       	ret

00000b44 <__vector_4>:
	}
	//END OF PAUSE##########################################################################################################
	
	END:
	// The closing STATE triggered by timer 3 (Ramp down). Makes system safe 'kill switch'
	cli();//disable interrupts
 b44:	1f 92       	push	r1
	return(0);
	//END OF END############################################################################################################

}//main
 b46:	0f 92       	push	r0
 b48:	0f b6       	in	r0, 0x3f	; 63
 b4a:	0f 92       	push	r0
 b4c:	11 24       	eor	r1, r1
 b4e:	0b b6       	in	r0, 0x3b	; 59
		STATE = 0;// return to state machine
	}
}//ISR 2

/* Set up the External Interrupt 3 Vector *///Exit Sensor
ISR(INT3_vect){//falling edge
 b50:	0f 92       	push	r0
 b52:	2f 93       	push	r18
 b54:	3f 93       	push	r19
 b56:	4f 93       	push	r20
 b58:	5f 93       	push	r21
 b5a:	6f 93       	push	r22
 b5c:	7f 93       	push	r23
 b5e:	8f 93       	push	r24
 b60:	9f 93       	push	r25
 b62:	af 93       	push	r26
 b64:	bf 93       	push	r27
 b66:	ef 93       	push	r30
 b68:	ff 93       	push	r31
	if((PIND & 0x08) != 0x08){//Software filter
 b6a:	4b 99       	sbic	0x09, 3	; 9
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <__vector_4+0x36>
		motorBrake();
 b6e:	b6 de       	rcall	.-660    	; 0x8dc <motorBrake>
		OCR0A = 220;//setting PWM. for duty cycle take % of 255
 b70:	8c ed       	ldi	r24, 0xDC	; 220
 b72:	87 bd       	out	0x27, r24	; 39
		STATE = 3;
 b74:	83 e0       	ldi	r24, 0x03	; 3
 b76:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <STATE>
		//STATE = 0;
	}
}//ISR 3
 b7a:	ff 91       	pop	r31
 b7c:	ef 91       	pop	r30
 b7e:	bf 91       	pop	r27
 b80:	af 91       	pop	r26
 b82:	9f 91       	pop	r25
 b84:	8f 91       	pop	r24
 b86:	7f 91       	pop	r23
 b88:	6f 91       	pop	r22
 b8a:	5f 91       	pop	r21
 b8c:	4f 91       	pop	r20
 b8e:	3f 91       	pop	r19
 b90:	2f 91       	pop	r18
 b92:	0f 90       	pop	r0
 b94:	0b be       	out	0x3b, r0	; 59
 b96:	0f 90       	pop	r0
 b98:	0f be       	out	0x3f, r0	; 63
 b9a:	0f 90       	pop	r0
 b9c:	1f 90       	pop	r1
 b9e:	18 95       	reti

00000ba0 <motorStop>:
/**************************************************************************************
* DESC: Stops suppling power to the motor (Disables). Will allow coasting
* INPUT: N/A
*/
void motorStop(){
	PORTB = 0B00000000; //removes power from motor controller
 ba0:	15 b8       	out	0x05, r1	; 5
 ba2:	08 95       	ret

00000ba4 <__vector_32>:
		//LCDWriteInt(newLink->e.obj,1);//for debugging
	}//else
}//ADC ISR

//triggered when timer 3 reaches compare value (8 seconds after ramp down is initiated)
ISR(TIMER3_COMPA_vect){//stop motor and print out sorted counts onto LCD then enter END state which disables all interrupts
 ba4:	1f 92       	push	r1
 ba6:	0f 92       	push	r0
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	0f 92       	push	r0
 bac:	11 24       	eor	r1, r1
 bae:	0b b6       	in	r0, 0x3b	; 59
 bb0:	0f 92       	push	r0
 bb2:	2f 93       	push	r18
 bb4:	3f 93       	push	r19
 bb6:	4f 93       	push	r20
 bb8:	5f 93       	push	r21
 bba:	6f 93       	push	r22
 bbc:	7f 93       	push	r23
 bbe:	8f 93       	push	r24
 bc0:	9f 93       	push	r25
 bc2:	af 93       	push	r26
 bc4:	bf 93       	push	r27
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
 bca:	ef 93       	push	r30
 bcc:	ff 93       	push	r31
	motorStop();
 bce:	e8 df       	rcall	.-48     	; 0xba0 <motorStop>
	InitLCD(LS_BLINK|LS_ULINE);
 bd0:	83 e0       	ldi	r24, 0x03	; 3
 bd2:	1e db       	rcall	.-2500   	; 0x210 <InitLCD>
	LCDClear();
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	e4 da       	rcall	.-2616   	; 0x1a2 <LCDByte>
	LCDWriteString("B:  A:  W:  S:");
 bda:	80 e2       	ldi	r24, 0x20	; 32
 bdc:	92 e0       	ldi	r25, 0x02	; 2
 bde:	59 db       	rcall	.-2382   	; 0x292 <LCDWriteString>
	LCDWriteIntXY(2,0,sorted[0],2);
 be0:	60 e0       	ldi	r22, 0x00	; 0
 be2:	82 e0       	ldi	r24, 0x02	; 2
 be4:	c2 db       	rcall	.-2172   	; 0x36a <LCDGotoXY>
 be6:	ca e3       	ldi	r28, 0x3A	; 58
 be8:	d2 e0       	ldi	r29, 0x02	; 2
 bea:	62 e0       	ldi	r22, 0x02	; 2
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	88 81       	ld	r24, Y
 bf0:	99 81       	ldd	r25, Y+1	; 0x01
 bf2:	5c db       	rcall	.-2376   	; 0x2ac <LCDWriteInt>
	LCDWriteIntXY(6,0,sorted[1],2);
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	86 e0       	ldi	r24, 0x06	; 6
 bf8:	b8 db       	rcall	.-2192   	; 0x36a <LCDGotoXY>
 bfa:	62 e0       	ldi	r22, 0x02	; 2
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	8a 81       	ldd	r24, Y+2	; 0x02
 c00:	9b 81       	ldd	r25, Y+3	; 0x03
 c02:	54 db       	rcall	.-2392   	; 0x2ac <LCDWriteInt>
	LCDWriteIntXY(10,0,sorted[2],2);
 c04:	60 e0       	ldi	r22, 0x00	; 0
 c06:	8a e0       	ldi	r24, 0x0A	; 10
 c08:	b0 db       	rcall	.-2208   	; 0x36a <LCDGotoXY>
 c0a:	62 e0       	ldi	r22, 0x02	; 2
 c0c:	70 e0       	ldi	r23, 0x00	; 0
 c0e:	8c 81       	ldd	r24, Y+4	; 0x04
 c10:	9d 81       	ldd	r25, Y+5	; 0x05
 c12:	4c db       	rcall	.-2408   	; 0x2ac <LCDWriteInt>
	LCDWriteIntXY(14,0,sorted[3],2);
 c14:	60 e0       	ldi	r22, 0x00	; 0
 c16:	8e e0       	ldi	r24, 0x0E	; 14
 c18:	a8 db       	rcall	.-2224   	; 0x36a <LCDGotoXY>
 c1a:	62 e0       	ldi	r22, 0x02	; 2
 c1c:	70 e0       	ldi	r23, 0x00	; 0
 c1e:	8e 81       	ldd	r24, Y+6	; 0x06
 c20:	9f 81       	ldd	r25, Y+7	; 0x07
 c22:	44 db       	rcall	.-2424   	; 0x2ac <LCDWriteInt>
 c24:	85 e0       	ldi	r24, 0x05	; 5
 c26:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <STATE>
	STATE = 5;//send to the end state
 c2a:	ff 91       	pop	r31
 c2c:	ef 91       	pop	r30
}//ramp timer ISR
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	bf 91       	pop	r27
 c34:	af 91       	pop	r26
 c36:	9f 91       	pop	r25
 c38:	8f 91       	pop	r24
 c3a:	7f 91       	pop	r23
 c3c:	6f 91       	pop	r22
 c3e:	5f 91       	pop	r21
 c40:	4f 91       	pop	r20
 c42:	3f 91       	pop	r19
 c44:	2f 91       	pop	r18
 c46:	0f 90       	pop	r0
 c48:	0b be       	out	0x3b, r0	; 59
 c4a:	0f 90       	pop	r0
 c4c:	0f be       	out	0x3f, r0	; 63
 c4e:	0f 90       	pop	r0
 c50:	1f 90       	pop	r1
 c52:	18 95       	reti

00000c54 <__divmodhi4>:
 c54:	97 fb       	bst	r25, 7
 c56:	07 2e       	mov	r0, r23
 c58:	16 f4       	brtc	.+4      	; 0xc5e <__divmodhi4+0xa>
 c5a:	00 94       	com	r0
 c5c:	06 d0       	rcall	.+12     	; 0xc6a <__divmodhi4_neg1>
 c5e:	77 fd       	sbrc	r23, 7
 c60:	08 d0       	rcall	.+16     	; 0xc72 <__divmodhi4_neg2>
 c62:	0b d0       	rcall	.+22     	; 0xc7a <__udivmodhi4>
 c64:	07 fc       	sbrc	r0, 7
 c66:	05 d0       	rcall	.+10     	; 0xc72 <__divmodhi4_neg2>
 c68:	3e f4       	brtc	.+14     	; 0xc78 <__divmodhi4_exit>

00000c6a <__divmodhi4_neg1>:
 c6a:	90 95       	com	r25
 c6c:	81 95       	neg	r24
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	08 95       	ret

00000c72 <__divmodhi4_neg2>:
 c72:	70 95       	com	r23
 c74:	61 95       	neg	r22
 c76:	7f 4f       	sbci	r23, 0xFF	; 255

00000c78 <__divmodhi4_exit>:
 c78:	08 95       	ret

00000c7a <__udivmodhi4>:
 c7a:	aa 1b       	sub	r26, r26
 c7c:	bb 1b       	sub	r27, r27
 c7e:	51 e1       	ldi	r21, 0x11	; 17
 c80:	07 c0       	rjmp	.+14     	; 0xc90 <__udivmodhi4_ep>

00000c82 <__udivmodhi4_loop>:
 c82:	aa 1f       	adc	r26, r26
 c84:	bb 1f       	adc	r27, r27
 c86:	a6 17       	cp	r26, r22
 c88:	b7 07       	cpc	r27, r23
 c8a:	10 f0       	brcs	.+4      	; 0xc90 <__udivmodhi4_ep>
 c8c:	a6 1b       	sub	r26, r22
 c8e:	b7 0b       	sbc	r27, r23

00000c90 <__udivmodhi4_ep>:
 c90:	88 1f       	adc	r24, r24
 c92:	99 1f       	adc	r25, r25
 c94:	5a 95       	dec	r21
 c96:	a9 f7       	brne	.-22     	; 0xc82 <__udivmodhi4_loop>
 c98:	80 95       	com	r24
 c9a:	90 95       	com	r25
 c9c:	bc 01       	movw	r22, r24
 c9e:	cd 01       	movw	r24, r26
 ca0:	08 95       	ret

00000ca2 <malloc>:
 ca2:	0f 93       	push	r16
 ca4:	1f 93       	push	r17
 ca6:	cf 93       	push	r28
 ca8:	df 93       	push	r29
 caa:	82 30       	cpi	r24, 0x02	; 2
 cac:	91 05       	cpc	r25, r1
 cae:	10 f4       	brcc	.+4      	; 0xcb4 <malloc+0x12>
 cb0:	82 e0       	ldi	r24, 0x02	; 2
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <__flp>
 cb8:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <__flp+0x1>
 cbc:	20 e0       	ldi	r18, 0x00	; 0
 cbe:	30 e0       	ldi	r19, 0x00	; 0
 cc0:	a0 e0       	ldi	r26, 0x00	; 0
 cc2:	b0 e0       	ldi	r27, 0x00	; 0
 cc4:	30 97       	sbiw	r30, 0x00	; 0
 cc6:	19 f1       	breq	.+70     	; 0xd0e <malloc+0x6c>
 cc8:	40 81       	ld	r20, Z
 cca:	51 81       	ldd	r21, Z+1	; 0x01
 ccc:	02 81       	ldd	r16, Z+2	; 0x02
 cce:	13 81       	ldd	r17, Z+3	; 0x03
 cd0:	48 17       	cp	r20, r24
 cd2:	59 07       	cpc	r21, r25
 cd4:	c8 f0       	brcs	.+50     	; 0xd08 <malloc+0x66>
 cd6:	84 17       	cp	r24, r20
 cd8:	95 07       	cpc	r25, r21
 cda:	69 f4       	brne	.+26     	; 0xcf6 <malloc+0x54>
 cdc:	10 97       	sbiw	r26, 0x00	; 0
 cde:	31 f0       	breq	.+12     	; 0xcec <malloc+0x4a>
 ce0:	12 96       	adiw	r26, 0x02	; 2
 ce2:	0c 93       	st	X, r16
 ce4:	12 97       	sbiw	r26, 0x02	; 2
 ce6:	13 96       	adiw	r26, 0x03	; 3
 ce8:	1c 93       	st	X, r17
 cea:	27 c0       	rjmp	.+78     	; 0xd3a <malloc+0x98>
 cec:	00 93 53 02 	sts	0x0253, r16	; 0x800253 <__flp>
 cf0:	10 93 54 02 	sts	0x0254, r17	; 0x800254 <__flp+0x1>
 cf4:	22 c0       	rjmp	.+68     	; 0xd3a <malloc+0x98>
 cf6:	21 15       	cp	r18, r1
 cf8:	31 05       	cpc	r19, r1
 cfa:	19 f0       	breq	.+6      	; 0xd02 <malloc+0x60>
 cfc:	42 17       	cp	r20, r18
 cfe:	53 07       	cpc	r21, r19
 d00:	18 f4       	brcc	.+6      	; 0xd08 <malloc+0x66>
 d02:	9a 01       	movw	r18, r20
 d04:	bd 01       	movw	r22, r26
 d06:	ef 01       	movw	r28, r30
 d08:	df 01       	movw	r26, r30
 d0a:	f8 01       	movw	r30, r16
 d0c:	db cf       	rjmp	.-74     	; 0xcc4 <malloc+0x22>
 d0e:	21 15       	cp	r18, r1
 d10:	31 05       	cpc	r19, r1
 d12:	f9 f0       	breq	.+62     	; 0xd52 <malloc+0xb0>
 d14:	28 1b       	sub	r18, r24
 d16:	39 0b       	sbc	r19, r25
 d18:	24 30       	cpi	r18, 0x04	; 4
 d1a:	31 05       	cpc	r19, r1
 d1c:	80 f4       	brcc	.+32     	; 0xd3e <malloc+0x9c>
 d1e:	8a 81       	ldd	r24, Y+2	; 0x02
 d20:	9b 81       	ldd	r25, Y+3	; 0x03
 d22:	61 15       	cp	r22, r1
 d24:	71 05       	cpc	r23, r1
 d26:	21 f0       	breq	.+8      	; 0xd30 <malloc+0x8e>
 d28:	fb 01       	movw	r30, r22
 d2a:	93 83       	std	Z+3, r25	; 0x03
 d2c:	82 83       	std	Z+2, r24	; 0x02
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <malloc+0x96>
 d30:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <__flp+0x1>
 d34:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <__flp>
 d38:	fe 01       	movw	r30, r28
 d3a:	32 96       	adiw	r30, 0x02	; 2
 d3c:	44 c0       	rjmp	.+136    	; 0xdc6 <malloc+0x124>
 d3e:	fe 01       	movw	r30, r28
 d40:	e2 0f       	add	r30, r18
 d42:	f3 1f       	adc	r31, r19
 d44:	81 93       	st	Z+, r24
 d46:	91 93       	st	Z+, r25
 d48:	22 50       	subi	r18, 0x02	; 2
 d4a:	31 09       	sbc	r19, r1
 d4c:	39 83       	std	Y+1, r19	; 0x01
 d4e:	28 83       	st	Y, r18
 d50:	3a c0       	rjmp	.+116    	; 0xdc6 <malloc+0x124>
 d52:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <__brkval>
 d56:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <__brkval+0x1>
 d5a:	23 2b       	or	r18, r19
 d5c:	41 f4       	brne	.+16     	; 0xd6e <malloc+0xcc>
 d5e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 d62:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 d66:	30 93 52 02 	sts	0x0252, r19	; 0x800252 <__brkval+0x1>
 d6a:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <__brkval>
 d6e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 d72:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 d76:	21 15       	cp	r18, r1
 d78:	31 05       	cpc	r19, r1
 d7a:	41 f4       	brne	.+16     	; 0xd8c <malloc+0xea>
 d7c:	2d b7       	in	r18, 0x3d	; 61
 d7e:	3e b7       	in	r19, 0x3e	; 62
 d80:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 d84:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 d88:	24 1b       	sub	r18, r20
 d8a:	35 0b       	sbc	r19, r21
 d8c:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <__brkval>
 d90:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <__brkval+0x1>
 d94:	e2 17       	cp	r30, r18
 d96:	f3 07       	cpc	r31, r19
 d98:	a0 f4       	brcc	.+40     	; 0xdc2 <malloc+0x120>
 d9a:	2e 1b       	sub	r18, r30
 d9c:	3f 0b       	sbc	r19, r31
 d9e:	28 17       	cp	r18, r24
 da0:	39 07       	cpc	r19, r25
 da2:	78 f0       	brcs	.+30     	; 0xdc2 <malloc+0x120>
 da4:	ac 01       	movw	r20, r24
 da6:	4e 5f       	subi	r20, 0xFE	; 254
 da8:	5f 4f       	sbci	r21, 0xFF	; 255
 daa:	24 17       	cp	r18, r20
 dac:	35 07       	cpc	r19, r21
 dae:	48 f0       	brcs	.+18     	; 0xdc2 <malloc+0x120>
 db0:	4e 0f       	add	r20, r30
 db2:	5f 1f       	adc	r21, r31
 db4:	50 93 52 02 	sts	0x0252, r21	; 0x800252 <__brkval+0x1>
 db8:	40 93 51 02 	sts	0x0251, r20	; 0x800251 <__brkval>
 dbc:	81 93       	st	Z+, r24
 dbe:	91 93       	st	Z+, r25
 dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <malloc+0x124>
 dc2:	e0 e0       	ldi	r30, 0x00	; 0
 dc4:	f0 e0       	ldi	r31, 0x00	; 0
 dc6:	cf 01       	movw	r24, r30
 dc8:	df 91       	pop	r29
 dca:	cf 91       	pop	r28
 dcc:	1f 91       	pop	r17
 dce:	0f 91       	pop	r16
 dd0:	08 95       	ret

00000dd2 <free>:
 dd2:	cf 93       	push	r28
 dd4:	df 93       	push	r29
 dd6:	00 97       	sbiw	r24, 0x00	; 0
 dd8:	09 f4       	brne	.+2      	; 0xddc <free+0xa>
 dda:	81 c0       	rjmp	.+258    	; 0xede <free+0x10c>
 ddc:	fc 01       	movw	r30, r24
 dde:	32 97       	sbiw	r30, 0x02	; 2
 de0:	13 82       	std	Z+3, r1	; 0x03
 de2:	12 82       	std	Z+2, r1	; 0x02
 de4:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <__flp>
 de8:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <__flp+0x1>
 dec:	10 97       	sbiw	r26, 0x00	; 0
 dee:	81 f4       	brne	.+32     	; 0xe10 <free+0x3e>
 df0:	20 81       	ld	r18, Z
 df2:	31 81       	ldd	r19, Z+1	; 0x01
 df4:	82 0f       	add	r24, r18
 df6:	93 1f       	adc	r25, r19
 df8:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <__brkval>
 dfc:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <__brkval+0x1>
 e00:	28 17       	cp	r18, r24
 e02:	39 07       	cpc	r19, r25
 e04:	51 f5       	brne	.+84     	; 0xe5a <free+0x88>
 e06:	f0 93 52 02 	sts	0x0252, r31	; 0x800252 <__brkval+0x1>
 e0a:	e0 93 51 02 	sts	0x0251, r30	; 0x800251 <__brkval>
 e0e:	67 c0       	rjmp	.+206    	; 0xede <free+0x10c>
 e10:	ed 01       	movw	r28, r26
 e12:	20 e0       	ldi	r18, 0x00	; 0
 e14:	30 e0       	ldi	r19, 0x00	; 0
 e16:	ce 17       	cp	r28, r30
 e18:	df 07       	cpc	r29, r31
 e1a:	40 f4       	brcc	.+16     	; 0xe2c <free+0x5a>
 e1c:	4a 81       	ldd	r20, Y+2	; 0x02
 e1e:	5b 81       	ldd	r21, Y+3	; 0x03
 e20:	9e 01       	movw	r18, r28
 e22:	41 15       	cp	r20, r1
 e24:	51 05       	cpc	r21, r1
 e26:	f1 f0       	breq	.+60     	; 0xe64 <free+0x92>
 e28:	ea 01       	movw	r28, r20
 e2a:	f5 cf       	rjmp	.-22     	; 0xe16 <free+0x44>
 e2c:	d3 83       	std	Z+3, r29	; 0x03
 e2e:	c2 83       	std	Z+2, r28	; 0x02
 e30:	40 81       	ld	r20, Z
 e32:	51 81       	ldd	r21, Z+1	; 0x01
 e34:	84 0f       	add	r24, r20
 e36:	95 1f       	adc	r25, r21
 e38:	c8 17       	cp	r28, r24
 e3a:	d9 07       	cpc	r29, r25
 e3c:	59 f4       	brne	.+22     	; 0xe54 <free+0x82>
 e3e:	88 81       	ld	r24, Y
 e40:	99 81       	ldd	r25, Y+1	; 0x01
 e42:	84 0f       	add	r24, r20
 e44:	95 1f       	adc	r25, r21
 e46:	02 96       	adiw	r24, 0x02	; 2
 e48:	91 83       	std	Z+1, r25	; 0x01
 e4a:	80 83       	st	Z, r24
 e4c:	8a 81       	ldd	r24, Y+2	; 0x02
 e4e:	9b 81       	ldd	r25, Y+3	; 0x03
 e50:	93 83       	std	Z+3, r25	; 0x03
 e52:	82 83       	std	Z+2, r24	; 0x02
 e54:	21 15       	cp	r18, r1
 e56:	31 05       	cpc	r19, r1
 e58:	29 f4       	brne	.+10     	; 0xe64 <free+0x92>
 e5a:	f0 93 54 02 	sts	0x0254, r31	; 0x800254 <__flp+0x1>
 e5e:	e0 93 53 02 	sts	0x0253, r30	; 0x800253 <__flp>
 e62:	3d c0       	rjmp	.+122    	; 0xede <free+0x10c>
 e64:	e9 01       	movw	r28, r18
 e66:	fb 83       	std	Y+3, r31	; 0x03
 e68:	ea 83       	std	Y+2, r30	; 0x02
 e6a:	49 91       	ld	r20, Y+
 e6c:	59 91       	ld	r21, Y+
 e6e:	c4 0f       	add	r28, r20
 e70:	d5 1f       	adc	r29, r21
 e72:	ec 17       	cp	r30, r28
 e74:	fd 07       	cpc	r31, r29
 e76:	61 f4       	brne	.+24     	; 0xe90 <free+0xbe>
 e78:	80 81       	ld	r24, Z
 e7a:	91 81       	ldd	r25, Z+1	; 0x01
 e7c:	84 0f       	add	r24, r20
 e7e:	95 1f       	adc	r25, r21
 e80:	02 96       	adiw	r24, 0x02	; 2
 e82:	e9 01       	movw	r28, r18
 e84:	99 83       	std	Y+1, r25	; 0x01
 e86:	88 83       	st	Y, r24
 e88:	82 81       	ldd	r24, Z+2	; 0x02
 e8a:	93 81       	ldd	r25, Z+3	; 0x03
 e8c:	9b 83       	std	Y+3, r25	; 0x03
 e8e:	8a 83       	std	Y+2, r24	; 0x02
 e90:	e0 e0       	ldi	r30, 0x00	; 0
 e92:	f0 e0       	ldi	r31, 0x00	; 0
 e94:	12 96       	adiw	r26, 0x02	; 2
 e96:	8d 91       	ld	r24, X+
 e98:	9c 91       	ld	r25, X
 e9a:	13 97       	sbiw	r26, 0x03	; 3
 e9c:	00 97       	sbiw	r24, 0x00	; 0
 e9e:	19 f0       	breq	.+6      	; 0xea6 <free+0xd4>
 ea0:	fd 01       	movw	r30, r26
 ea2:	dc 01       	movw	r26, r24
 ea4:	f7 cf       	rjmp	.-18     	; 0xe94 <free+0xc2>
 ea6:	8d 91       	ld	r24, X+
 ea8:	9c 91       	ld	r25, X
 eaa:	11 97       	sbiw	r26, 0x01	; 1
 eac:	9d 01       	movw	r18, r26
 eae:	2e 5f       	subi	r18, 0xFE	; 254
 eb0:	3f 4f       	sbci	r19, 0xFF	; 255
 eb2:	82 0f       	add	r24, r18
 eb4:	93 1f       	adc	r25, r19
 eb6:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <__brkval>
 eba:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <__brkval+0x1>
 ebe:	28 17       	cp	r18, r24
 ec0:	39 07       	cpc	r19, r25
 ec2:	69 f4       	brne	.+26     	; 0xede <free+0x10c>
 ec4:	30 97       	sbiw	r30, 0x00	; 0
 ec6:	29 f4       	brne	.+10     	; 0xed2 <free+0x100>
 ec8:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__flp+0x1>
 ecc:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <__flp>
 ed0:	02 c0       	rjmp	.+4      	; 0xed6 <free+0x104>
 ed2:	13 82       	std	Z+3, r1	; 0x03
 ed4:	12 82       	std	Z+2, r1	; 0x02
 ed6:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <__brkval+0x1>
 eda:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <__brkval>
 ede:	df 91       	pop	r29
 ee0:	cf 91       	pop	r28
 ee2:	08 95       	ret

00000ee4 <_exit>:
 ee4:	f8 94       	cli

00000ee6 <__stop_program>:
 ee6:	ff cf       	rjmp	.-2      	; 0xee6 <__stop_program>
